; ModuleID = './outfiles/test20.bc'
source_filename = "./test/test20.c"
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%struct.fptr = type { i32 (i32, i32)* }
%struct.fsptr = type { %struct.fptr* }

; Function Attrs: noinline nounwind uwtable
define i32 @plus(i32 %a, i32 %b) #0 !dbg !7 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !11, metadata !12), !dbg !13
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !14, metadata !12), !dbg !15
  %add = add nsw i32 %a, %b, !dbg !16
  ret i32 %add, !dbg !17
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.declare(metadata, metadata, metadata) #1

; Function Attrs: noinline nounwind uwtable
define i32 @minus(i32 %a, i32 %b) #0 !dbg !18 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !19, metadata !12), !dbg !20
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !21, metadata !12), !dbg !22
  %sub = sub nsw i32 %a, %b, !dbg !23
  ret i32 %sub, !dbg !24
}

; Function Attrs: noinline nounwind uwtable
define %struct.fptr* @foo(i32 %a, i32 %b, %struct.fsptr* %i_fptr, %struct.fsptr* %j_fptr) #0 !dbg !25 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !37, metadata !12), !dbg !38
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !39, metadata !12), !dbg !40
  call void @llvm.dbg.value(metadata %struct.fsptr* %i_fptr, i64 0, metadata !41, metadata !12), !dbg !42
  call void @llvm.dbg.value(metadata %struct.fsptr* %j_fptr, i64 0, metadata !43, metadata !12), !dbg !44
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %j_fptr, i32 0, i32 0, !dbg !45
  %0 = load %struct.fptr*, %struct.fptr** %sptr, align 8, !dbg !45
  %sptr1 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %i_fptr, i32 0, i32 0, !dbg !46
  store %struct.fptr* %0, %struct.fptr** %sptr1, align 8, !dbg !47
  %sptr2 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %i_fptr, i32 0, i32 0, !dbg !48
  %1 = load %struct.fptr*, %struct.fptr** %sptr2, align 8, !dbg !48
  ret %struct.fptr* %1, !dbg !49
}

; Function Attrs: noinline nounwind uwtable
define %struct.fptr* @clever(i32 %a, i32 %b, %struct.fsptr* %x_fptr, %struct.fsptr* %y_fptr) #0 !dbg !50 {
entry:
  call void @llvm.dbg.value(metadata i32 %a, i64 0, metadata !51, metadata !12), !dbg !52
  call void @llvm.dbg.value(metadata i32 %b, i64 0, metadata !53, metadata !12), !dbg !54
  call void @llvm.dbg.value(metadata %struct.fsptr* %x_fptr, i64 0, metadata !55, metadata !12), !dbg !56
  call void @llvm.dbg.value(metadata %struct.fsptr* %y_fptr, i64 0, metadata !57, metadata !12), !dbg !58
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %y_fptr, i32 0, i32 0, !dbg !59
  %0 = load %struct.fptr*, %struct.fptr** %sptr, align 8, !dbg !59
  ret %struct.fptr* %0, !dbg !60
}

; Function Attrs: noinline nounwind uwtable
define i32 @moo(i8 signext %x, i32 %op1, i32 %op2) #0 !dbg !61 {
entry:
  %a_fptr = alloca %struct.fptr, align 8
  %s_fptr = alloca %struct.fptr, align 8
  %m_fptr = alloca %struct.fsptr, align 8
  %n_fptr = alloca %struct.fsptr, align 8
  call void @llvm.dbg.value(metadata i8 %x, i64 0, metadata !65, metadata !12), !dbg !66
  call void @llvm.dbg.value(metadata i32 %op1, i64 0, metadata !67, metadata !12), !dbg !68
  call void @llvm.dbg.value(metadata i32 %op2, i64 0, metadata !69, metadata !12), !dbg !70
  call void @llvm.dbg.declare(metadata %struct.fptr* %a_fptr, metadata !71, metadata !12), !dbg !72
  %p_fptr = getelementptr inbounds %struct.fptr, %struct.fptr* %a_fptr, i32 0, i32 0, !dbg !73
  store i32 (i32, i32)* @plus, i32 (i32, i32)** %p_fptr, align 8, !dbg !74
  call void @llvm.dbg.declare(metadata %struct.fptr* %s_fptr, metadata !75, metadata !12), !dbg !76
  %p_fptr1 = getelementptr inbounds %struct.fptr, %struct.fptr* %s_fptr, i32 0, i32 0, !dbg !77
  store i32 (i32, i32)* @minus, i32 (i32, i32)** %p_fptr1, align 8, !dbg !78
  call void @llvm.dbg.declare(metadata %struct.fsptr* %m_fptr, metadata !79, metadata !12), !dbg !80
  %sptr = getelementptr inbounds %struct.fsptr, %struct.fsptr* %m_fptr, i32 0, i32 0, !dbg !81
  store %struct.fptr* %a_fptr, %struct.fptr** %sptr, align 8, !dbg !82
  call void @llvm.dbg.declare(metadata %struct.fsptr* %n_fptr, metadata !83, metadata !12), !dbg !84
  %sptr2 = getelementptr inbounds %struct.fsptr, %struct.fsptr* %n_fptr, i32 0, i32 0, !dbg !85
  store %struct.fptr* %s_fptr, %struct.fptr** %sptr2, align 8, !dbg !86
  call void @llvm.dbg.value(metadata %struct.fptr* null, i64 0, metadata !87, metadata !12), !dbg !88
  %conv = sext i8 %x to i32, !dbg !89
  %cmp = icmp eq i32 %conv, 43, !dbg !91
  br i1 %cmp, label %if.then, label %if.else, !dbg !92

if.then:                                          ; preds = %entry
  call void @llvm.dbg.value(metadata %struct.fptr* (i32, i32, %struct.fsptr*, %struct.fsptr*)* @foo, i64 0, metadata !93, metadata !12), !dbg !95
  br label %if.end8, !dbg !96

if.else:                                          ; preds = %entry
  %conv4 = sext i8 %x to i32, !dbg !98
  %cmp5 = icmp eq i32 %conv4, 45, !dbg !100
  br i1 %cmp5, label %if.then7, label %if.end, !dbg !101

if.then7:                                         ; preds = %if.else
  call void @llvm.dbg.value(metadata %struct.fptr* (i32, i32, %struct.fsptr*, %struct.fsptr*)* @clever, i64 0, metadata !93, metadata !12), !dbg !95
  br label %if.end, !dbg !102

if.end:                                           ; preds = %if.then7, %if.else
  call void @llvm.dbg.value(metadata %struct.fptr* (i32, i32, %struct.fsptr*, %struct.fsptr*)* @clever, i64 0, metadata !93, metadata !12), !dbg !95
  br label %if.end8

if.end8:                                          ; preds = %if.end, %if.then
  %goo_ptr.1 = phi %struct.fptr* (i32, i32, %struct.fsptr*, %struct.fsptr*)* [ @foo, %if.then ], [ @clever, %if.end ]
  call void @llvm.dbg.value(metadata %struct.fptr* (i32, i32, %struct.fsptr*, %struct.fsptr*)* %goo_ptr.1, i64 0, metadata !93, metadata !12), !dbg !95
  %call = call %struct.fptr* %goo_ptr.1(i32 %op1, i32 %op2, %struct.fsptr* %m_fptr, %struct.fsptr* %n_fptr), !dbg !104
  call void @llvm.dbg.value(metadata %struct.fptr* %call, i64 0, metadata !87, metadata !12), !dbg !88
  %p_fptr9 = getelementptr inbounds %struct.fptr, %struct.fptr* %call, i32 0, i32 0, !dbg !105
  %0 = load i32 (i32, i32)*, i32 (i32, i32)** %p_fptr9, align 8, !dbg !105
  %call10 = call i32 %0(i32 %op1, i32 %op2), !dbg !106
  ret i32 0, !dbg !107
}

; Function Attrs: nounwind readnone speculatable
declare void @llvm.dbg.value(metadata, i64, metadata, metadata) #1

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { nounwind readnone speculatable }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4, !5}
!llvm.ident = !{!6}

!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 5.0.0 (tags/RELEASE_500/final 316205)", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "./test/test20.c", directory: "/home/katherine/CompileClass/Assignment_3")
!2 = !{}
!3 = !{i32 2, !"Dwarf Version", i32 4}
!4 = !{i32 2, !"Debug Info Version", i32 3}
!5 = !{i32 1, !"wchar_size", i32 4}
!6 = !{!"clang version 5.0.0 (tags/RELEASE_500/final 316205)"}
!7 = distinct !DISubprogram(name: "plus", scope: !1, file: !1, line: 10, type: !8, isLocal: false, isDefinition: true, scopeLine: 10, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!8 = !DISubroutineType(types: !9)
!9 = !{!10, !10, !10}
!10 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
!11 = !DILocalVariable(name: "a", arg: 1, scope: !7, file: !1, line: 10, type: !10)
!12 = !DIExpression()
!13 = !DILocation(line: 10, column: 14, scope: !7)
!14 = !DILocalVariable(name: "b", arg: 2, scope: !7, file: !1, line: 10, type: !10)
!15 = !DILocation(line: 10, column: 21, scope: !7)
!16 = !DILocation(line: 11, column: 12, scope: !7)
!17 = !DILocation(line: 11, column: 4, scope: !7)
!18 = distinct !DISubprogram(name: "minus", scope: !1, file: !1, line: 14, type: !8, isLocal: false, isDefinition: true, scopeLine: 14, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!19 = !DILocalVariable(name: "a", arg: 1, scope: !18, file: !1, line: 14, type: !10)
!20 = !DILocation(line: 14, column: 15, scope: !18)
!21 = !DILocalVariable(name: "b", arg: 2, scope: !18, file: !1, line: 14, type: !10)
!22 = !DILocation(line: 14, column: 22, scope: !18)
!23 = !DILocation(line: 15, column: 12, scope: !18)
!24 = !DILocation(line: 15, column: 4, scope: !18)
!25 = distinct !DISubprogram(name: "foo", scope: !1, file: !1, line: 18, type: !26, isLocal: false, isDefinition: true, scopeLine: 18, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!26 = !DISubroutineType(types: !27)
!27 = !{!28, !10, !10, !33, !33}
!28 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !29, size: 64)
!29 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fptr", file: !1, line: 2, size: 64, elements: !30)
!30 = !{!31}
!31 = !DIDerivedType(tag: DW_TAG_member, name: "p_fptr", scope: !29, file: !1, line: 4, baseType: !32, size: 64)
!32 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8, size: 64)
!33 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !34, size: 64)
!34 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "fsptr", file: !1, line: 6, size: 64, elements: !35)
!35 = !{!36}
!36 = !DIDerivedType(tag: DW_TAG_member, name: "sptr", scope: !34, file: !1, line: 8, baseType: !28, size: 64)
!37 = !DILocalVariable(name: "a", arg: 1, scope: !25, file: !1, line: 18, type: !10)
!38 = !DILocation(line: 18, column: 23, scope: !25)
!39 = !DILocalVariable(name: "b", arg: 2, scope: !25, file: !1, line: 18, type: !10)
!40 = !DILocation(line: 18, column: 30, scope: !25)
!41 = !DILocalVariable(name: "i_fptr", arg: 3, scope: !25, file: !1, line: 18, type: !33)
!42 = !DILocation(line: 18, column: 48, scope: !25)
!43 = !DILocalVariable(name: "j_fptr", arg: 4, scope: !25, file: !1, line: 18, type: !33)
!44 = !DILocation(line: 18, column: 71, scope: !25)
!45 = !DILocation(line: 19, column: 28, scope: !25)
!46 = !DILocation(line: 19, column: 13, scope: !25)
!47 = !DILocation(line: 19, column: 18, scope: !25)
!48 = !DILocation(line: 20, column: 19, scope: !25)
!49 = !DILocation(line: 20, column: 4, scope: !25)
!50 = distinct !DISubprogram(name: "clever", scope: !1, file: !1, line: 23, type: !26, isLocal: false, isDefinition: true, scopeLine: 23, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!51 = !DILocalVariable(name: "a", arg: 1, scope: !50, file: !1, line: 23, type: !10)
!52 = !DILocation(line: 23, column: 26, scope: !50)
!53 = !DILocalVariable(name: "b", arg: 2, scope: !50, file: !1, line: 23, type: !10)
!54 = !DILocation(line: 23, column: 33, scope: !50)
!55 = !DILocalVariable(name: "x_fptr", arg: 3, scope: !50, file: !1, line: 23, type: !33)
!56 = !DILocation(line: 23, column: 51, scope: !50)
!57 = !DILocalVariable(name: "y_fptr", arg: 4, scope: !50, file: !1, line: 23, type: !33)
!58 = !DILocation(line: 23, column: 74, scope: !50)
!59 = !DILocation(line: 24, column: 19, scope: !50)
!60 = !DILocation(line: 24, column: 4, scope: !50)
!61 = distinct !DISubprogram(name: "moo", scope: !1, file: !1, line: 27, type: !62, isLocal: false, isDefinition: true, scopeLine: 27, flags: DIFlagPrototyped, isOptimized: false, unit: !0, variables: !2)
!62 = !DISubroutineType(types: !63)
!63 = !{!10, !64, !10, !10}
!64 = !DIBasicType(name: "char", size: 8, encoding: DW_ATE_signed_char)
!65 = !DILocalVariable(name: "x", arg: 1, scope: !61, file: !1, line: 27, type: !64)
!66 = !DILocation(line: 27, column: 14, scope: !61)
!67 = !DILocalVariable(name: "op1", arg: 2, scope: !61, file: !1, line: 27, type: !10)
!68 = !DILocation(line: 27, column: 21, scope: !61)
!69 = !DILocalVariable(name: "op2", arg: 3, scope: !61, file: !1, line: 27, type: !10)
!70 = !DILocation(line: 27, column: 30, scope: !61)
!71 = !DILocalVariable(name: "a_fptr", scope: !61, file: !1, line: 28, type: !29)
!72 = !DILocation(line: 28, column: 17, scope: !61)
!73 = !DILocation(line: 29, column: 12, scope: !61)
!74 = !DILocation(line: 29, column: 18, scope: !61)
!75 = !DILocalVariable(name: "s_fptr", scope: !61, file: !1, line: 30, type: !29)
!76 = !DILocation(line: 30, column: 17, scope: !61)
!77 = !DILocation(line: 31, column: 12, scope: !61)
!78 = !DILocation(line: 31, column: 18, scope: !61)
!79 = !DILocalVariable(name: "m_fptr", scope: !61, file: !1, line: 32, type: !34)
!80 = !DILocation(line: 32, column: 18, scope: !61)
!81 = !DILocation(line: 33, column: 12, scope: !61)
!82 = !DILocation(line: 33, column: 16, scope: !61)
!83 = !DILocalVariable(name: "n_fptr", scope: !61, file: !1, line: 34, type: !34)
!84 = !DILocation(line: 34, column: 18, scope: !61)
!85 = !DILocation(line: 35, column: 12, scope: !61)
!86 = !DILocation(line: 35, column: 16, scope: !61)
!87 = !DILocalVariable(name: "t_fptr", scope: !61, file: !1, line: 38, type: !28)
!88 = !DILocation(line: 38, column: 18, scope: !61)
!89 = !DILocation(line: 40, column: 9, scope: !90)
!90 = distinct !DILexicalBlock(scope: !61, file: !1, line: 40, column: 9)
!91 = !DILocation(line: 40, column: 11, scope: !90)
!92 = !DILocation(line: 40, column: 9, scope: !61)
!93 = !DILocalVariable(name: "goo_ptr", scope: !61, file: !1, line: 37, type: !94)
!94 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !26, size: 64)
!95 = !DILocation(line: 37, column: 20, scope: !61)
!96 = !DILocation(line: 42, column: 5, scope: !97)
!97 = distinct !DILexicalBlock(scope: !90, file: !1, line: 40, column: 19)
!98 = !DILocation(line: 43, column: 14, scope: !99)
!99 = distinct !DILexicalBlock(scope: !90, file: !1, line: 43, column: 14)
!100 = !DILocation(line: 43, column: 16, scope: !99)
!101 = !DILocation(line: 43, column: 14, scope: !90)
!102 = !DILocation(line: 45, column: 5, scope: !103)
!103 = distinct !DILexicalBlock(scope: !99, file: !1, line: 43, column: 24)
!104 = !DILocation(line: 47, column: 14, scope: !61)
!105 = !DILocation(line: 48, column: 13, scope: !61)
!106 = !DILocation(line: 48, column: 5, scope: !61)
!107 = !DILocation(line: 50, column: 5, scope: !61)
Not in the same function!
